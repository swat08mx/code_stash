## First code block for identifying and printing the +1 reading frame and 
## then identifying the start and stop codons, and also printing the protein coding sequences.

codons = {
    'GCU': 'Ala ',
    'GCC': 'Ala ',
    'GCA': 'Ala ',
    'GCG': 'Ala ',
    'CGU': 'Arg ',
    'CGC': 'Arg ',
    'CGA': 'Arg ',
    'CGG': 'Arg ',
    'AGA': 'Arg ',
    'AGG': 'Arg ',
    'AAU': 'Asn ',
    'AAC': 'Asn ',
    'GAU': 'Asp ',
    'GAC': 'Asp ',
    'UGU': 'Cys ',
    'UGC': 'Cys ',
    'CAA': 'Gln ',
    'CAG': 'Gln ',
    'GAA': 'Glu ',
    'GAG': 'Glu ',
    'GGU': 'Gly ',
    'GGC': 'Gly ',
    'GGA': 'Gly ',
    'GGG': 'Gly ',
    'CAU': 'His ',
    'CAC': 'His ',
    'AUU': 'Ile ',
    'AUC': 'Ile ',
    'AUA': 'Ile ',
    'UUA': 'Leu ',
    'UUG': 'Leu ',
    'CUU': 'Leu ',
    'CUC': 'Leu ',
    'CUA': 'Leu ',
    'CUG': 'Leu ',
    'AAA': 'Lys ',
    'AAG': 'Lys ',
    'AUG': 'Met ',
    'UUU': 'Phe ',
    'UUC': 'Phe ',
    'CCU': 'Pro ',
    'CCC': 'Pro ',
    'CCA': 'Pro ',
    'CCG': 'Pro ',
    'UCU': 'Ser ',
    'UCC': 'Ser ',
    'UCA': 'Ser ',
    'UCG': 'Ser ',
    'AGU': 'Ser ',
    'AGC': 'Ser ',
    'ACU': 'Thr ',
    'ACC': 'Thr ',
    'ACA': 'Thr ',
    'ACG': 'Thr ',
    'UGG': 'Trp ',
    'UAU': 'Tyr ',
    'UAC': 'Tyr ',
    'GUU': 'Val ',
    'GUC': 'Val ',
    'GUA': 'Val ',
    'GUG': 'Val ',
    'UAA': '',
    'UGA': '',
    'UAG': ''
}

seq="AGCCCUCCAGGACAGGCUGCAGCAGAAGAGAUGGCCAUCAAGCAGUAAGUCUGUUCCAAGGGCCUUUGCAUGGUCAGGUGGGCUCAGGAUUCCUGAAGGUAAGUGGCUGGACCCCAGGCCCCAGC"
seq_pos_one = ""
count = 0
for i in range(len(seq)):
    seq_pos_one += seq[i]
    count += 1
    if count == 3:
        count = 0
        seq_pos_one += " "
print(f"The +1 reading frame is: {seq_pos_one}")
def translation(final_string):
    points=0
    translated=''
    letters=''
    final = final_string.replace(' ', '')
    for i in range(len(final)):
        letters+=final[i]
        points+=1
        if points==3:
            translated+=codons[letters]
            points=0
            letters=''
    if final_string=='':
        pass
    else:    
        return translated
orfs=[]
point=1
found=1
final_string=''
for i in range(len(seq)):
    if seq_pos_one[i]=='A' and seq_pos_one[i+1]=='U' and seq_pos_one[i+2]=='G':
        found+=1
        for j in range((i+3),len(seq_pos_one)):
            if seq_pos_one[j]=='U'and seq_pos_one[j+1]=='A' and seq_pos_one[j+2]=='G':
                point+=1
                break
            elif seq_pos_one[j]=='U'and seq_pos_one[j+1]=='G' and seq_pos_one[j+2]=='A':
                point+=1
                break
            elif seq_pos_one[j]=='U'and seq_pos_one[j+1]=='A' and seq_pos_one[j+2]=='A':
                point+=1
                break
            
            else:
                final_string+=seq_pos_one[j]
            if point==0:
                orfs=[]
                break
        if found>1 and found%found==0:
            orfs.append('AUG'+final_string)
            final_string=''
if point!=0:
    for i, orf in enumerate(orfs):
        print(f'The ORFs {i+1} is: {orf}')
        print(f'The amino acid sequence for ORF{i+1} is: {translation(orf)}')
elif point==0:
    print("No reading frames were found")
    exit()
if 'AUG' not in seq_pos_one:
    print("No reading frames were found")
    final_string=''
